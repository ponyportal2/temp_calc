#include "logic_model.h"

#define EPS 0.0000009
#define EPSFOUR 0.0001
#define MAX_STRING_SIZE 16384

#suite SmartCalc

// TEST1

#test calc1

char expression[MAX_STRING_SIZE] = "5+5"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("10",NULL), strtold(outputStr,NULL), EPS);

// TEST2

#test calc2

char expression[MAX_STRING_SIZE] = "-(+5-(+6-(-7-(-1-(+3+4+-54343.43434*-6+-3/-4++5++7)))))"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("-326073.35604",NULL), strtold(outputStr,NULL), EPS);

// TEST3

#test calc3

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+-5678.1234*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)+6)"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("-40920.7057214",NULL), strtold(outputStr,NULL), EPS);

// TEST4

#test calc4

char expression[MAX_STRING_SIZE] = "1000000^99"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("inf", outputStr);

// TEST5

#test calc5

char expression[MAX_STRING_SIZE] = "3.09mod"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("NAN encountered during calculation", outputStr);

// TEST6

#test calc6

char expression[MAX_STRING_SIZE] = "-(-5+aboba)"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("Invalid symbols encountered", outputStr);

// ------
// WITH X
// ------

#suite SmartCalcX

// TESTX1

#test calcx1

char expression[MAX_STRING_SIZE] = "5+x";
char x[MAX_STRING_SIZE] = "5+5"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("15",NULL), strtold(outputStr,NULL), EPS);

// TESTX4

#test calcx4

char expression[MAX_STRING_SIZE] = "45/x";
char x[MAX_STRING_SIZE] = "9";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("5",NULL), strtold(outputStr,NULL), EPS);

// TESTX8

#test calcx8

char expression[MAX_STRING_SIZE] = "x*x";
char x[MAX_STRING_SIZE] = "1000000000000000000000000000000000000000000000";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("inf", outputStr);

// TESTX9

#test calcx9

char expression[MAX_STRING_SIZE] = "x^3 + x/2 + 56mod4";
char x[MAX_STRING_SIZE] = "9.4342345235235";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("844.409",NULL), strtold(outputStr,NULL), EPSFOUR);

// TESTX10

#test calcx10

char expression[MAX_STRING_SIZE] = "x^3 + x/2 + 56%4";
char x[MAX_STRING_SIZE] = "9.4342345235235";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("844.409",NULL), strtold(outputStr,NULL), EPSFOUR);

// TESTX11

#test calcx11

char expression[MAX_STRING_SIZE] = "x^2+x^3*(-4 * x)-100";
char x[MAX_STRING_SIZE] = "-1000000";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("-3999999999998999742382080.0", outputStr);

// TESTX11_2

#test calcx11_2

char expression[MAX_STRING_SIZE] = "(x^2+x^3*(-4 * x)-100)-(x^2+x^3*(-4 * x)-100)";
char x[MAX_STRING_SIZE] = "-1000000";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("0",NULL), strtold(outputStr,NULL), EPS);

// TESTX12

#test calcx12

char expression[MAX_STRING_SIZE] = "x^1.1";
char x[MAX_STRING_SIZE] = "-1000000";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);
// printf("\n>>%s<<\n",outputStr);

ck_assert_str_eq("NAN encountered during calculation", outputStr);

// TESTX13

#test calcx13

char expression[MAX_STRING_SIZE] = "x^2-sqrt(x^x)";
char x[MAX_STRING_SIZE] = "64";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("-6277101735386680763835789423207666416102355444464034512896.0",NULL), strtold(outputStr,NULL), EPS);

// TESTX14

#test calcx14

char expression[MAX_STRING_SIZE] = "cos(acos(tan(atan(sin(x)))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("0.4794255386", outputStr);

// TESTX15

#test calcx15

char expression[MAX_STRING_SIZE] = "cos(acos(tan(atan(sin(sqrt(x))))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("0.6496369391", outputStr);

// TESTX16

#test calcx16

char expression[MAX_STRING_SIZE] = "cos(acos(tan(atan(sin(sqrt(x^sqrt(sqrt((5)*(+5%-4))))))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("Brackets are invalid", outputStr);

// TESTX17

#test calcx17

char expression[MAX_STRING_SIZE] = "cos(acos(tan(atan(sin(sqrt(x^sqrt(sqrt((5)*(+5%4)))))))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("0.5609747685", outputStr);

// TESTX19

#test calcx19

char expression[MAX_STRING_SIZE] = "cos(acos(tan(atan(sin(sqrt(0.35469507876))))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("0.5609747685", outputStr);

// TESTX20

#test calcx20

char expression[MAX_STRING_SIZE] = "=cos(acos(tan(atan(sin(sqrt(0.35469507876))))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("Invalid symbols encountered", outputStr);

// TESTX21

#test calcx21

char expression[MAX_STRING_SIZE] = "5";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("5",NULL), strtold(outputStr,NULL), EPS);

// TESTX22

#test calcx22

char expression[MAX_STRING_SIZE] = "5";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("5",NULL), strtold(outputStr,NULL), EPS);

// TESTX23

#test calcx23

char expression[MAX_STRING_SIZE] = "asin(cos(x))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("1.0708",NULL), strtold(outputStr,NULL), EPSFOUR);

// TESTX24

#test calcx24

char expression[MAX_STRING_SIZE] = "asin(cos(sqrt(-x)))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("NAN encountered during calculation", outputStr);

// TESTX25

#test calcx25

char expression[MAX_STRING_SIZE] = "log(x)";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("-0.2291479884", outputStr);

// TESTX26

#test calcx26

char expression[MAX_STRING_SIZE] = "ln(x)";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("-0.5276327421", outputStr);

// TESTX27

#test calcx27

char expression[MAX_STRING_SIZE] = "=fsdfsdfsdf";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("Invalid symbols encountered", outputStr);

// TESTX28

#test calcx28

char expression[MAX_STRING_SIZE] = "5(6)(7)";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("210.0", outputStr);

// TESTX30

#test calcx30

char expression[MAX_STRING_SIZE] = "-5-+5--2*+5/+1";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("0.0", outputStr);

// TESTX31

#test calcx31

char expression[MAX_STRING_SIZE] = "-5^-5";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("-0.00032", outputStr);

// TESTX32

#test calcx32

char expression[MAX_STRING_SIZE] = "+5^+5";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("3125.0", outputStr);

// TESTX33

#test calcx33

char expression[MAX_STRING_SIZE] = "+5%+4";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("1.0", outputStr);

// TESTX34

#test calcx34

char expression[MAX_STRING_SIZE] = "-5%-4";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("-1.0", outputStr);

// TESTX35

#test calcx35

char expression[MAX_STRING_SIZE] = "-(-5)%-4";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("1.0", outputStr); // maybe incorrect

// TESTX36

#test calcx36

char expression[MAX_STRING_SIZE] = "--5%-4";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("1.0", outputStr); // maybe incorrect

// TESTX_E_29

#test calcx_E_29

char expression[MAX_STRING_SIZE] = "(+5)-(+5)-(-2)*(+5)/(+1)";
char x[MAX_STRING_SIZE] = "0.59";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("10.0", outputStr);

// TESTX_E_7

#test calcx_E_7

char expression[MAX_STRING_SIZE] = "-0.68*x*x*x*x-0.1*x*x*x-0.01*x*x-0.0*x*x*x";
char x[MAX_STRING_SIZE] = "1000000000000000000000000000000000000000000000";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("-inf", outputStr);

// TESTX_E_6

#test calcx_E_6

char expression[MAX_STRING_SIZE] = "-0.68*x*x*x*x-0.1*x*x*x-0.01*x*x-0.0*x*x*x";
char x[MAX_STRING_SIZE] = "0";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("0",NULL), strtold(outputStr,NULL), EPS);

// TESTX_E_2

#test calcx_E_2

char expression[MAX_STRING_SIZE] = "-(+5-(+6-(-7-(-1-(+3+4+x*-6+-3/-4++5++7)))))";
char x[MAX_STRING_SIZE] = "-54343.43434"; 
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("-326073.35604",NULL), strtold(outputStr,NULL), EPS);

// TESTX_E_3

#test calcx_E_3

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+x*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)+6)";
char x[MAX_STRING_SIZE] = "-5678.1234";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("-40920.7057214",NULL), strtold(outputStr,NULL), EPS);

// TESTX_VAL_1

#test calcx_VAL_1

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+x*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)+**6)";
char x[MAX_STRING_SIZE] = "-5678.1234";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("Invalid symbols encountered",NULL), strtold(outputStr,NULL), EPS);

// TESTX_VAL_2

#test calcx_VAL_2

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+x*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)+&6)";
char x[MAX_STRING_SIZE] = "-5678.1234";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("Invalid symbols encountered",NULL), strtold(outputStr,NULL), EPS);

// TESTX_VAL_3

#test calcx_VAL_3

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+x*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)+++6)";
char x[MAX_STRING_SIZE] = "-5678.1234";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("Invalid symbols encountered",NULL), strtold(outputStr,NULL), EPS);

// TESTX_VAL_4

#test calcx_VAL_4

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+x*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)---6)";
char x[MAX_STRING_SIZE] = "-5678.1234";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("Invalid symbols encountered",NULL), strtold(outputStr,NULL), EPS);


// TESTX_VAL_5

#test calcx_VAL_5

char expression[MAX_STRING_SIZE] = "-(-(-3*(-(-(3*4+x*-6+-3/-4+5+7)*(2/5)+4/(9-5*(5/6))))-5)-sqtr(6))";
char x[MAX_STRING_SIZE] = "-5678.1234";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_ldouble_eq_tol(strtold("Invalid symbols encountered",NULL), strtold(outputStr,NULL), EPS);


// TESTX_E_18

#test calcx_E_18

char expression[MAX_STRING_SIZE] = "sin(sqrt(x^((-21)^(1/4))))";
char x[MAX_STRING_SIZE] = "0.5";
char outputStr[MAX_STRING_SIZE] = {0};
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("NAN encountered during calculation", outputStr);

// TESTX_E_5

#test calcx_E_5

char expression[MAX_STRING_SIZE] = "45/x";
char x[MAX_STRING_SIZE] = "0";
char outputStr[MAX_STRING_SIZE] = {0}; 
ReplaceX(expression, x);
testCalculate(expression, outputStr, 0);

ck_assert_str_eq("Division by zero is impossible", outputStr);